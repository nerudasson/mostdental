import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';
import { format } from 'date-fns';
import type { PaymentStatement } from '@/lib/types/billing';

export function generateStatementPDF(statement: PaymentStatement): Blob {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;

  // Add header
  doc.setFontSize(20);
  doc.text('Statement', 20, 20);

  doc.setFontSize(10);
  doc.text(`Statement #${statement.id}`, 20, 30);
  doc.text(
    `Date: ${format(statement.createdAt, 'PP')}`,
    20, 35
  );

  if (statement.period) {
    doc.text(
      `Period: ${format(statement.period.startDate, 'PP')} - ${format(statement.period.endDate, 'PP')}`,
      20, 40
    );
  }

  // Add orders table
  autoTable(doc, {
    startY: 50,
    head: [['Order #', 'Description', 'Amount']],
    body: statement.orders.map(order => [
      order.id,
      order.description,
      `€${order.amount.toFixed(2)}`,
    ]),
    foot: [['', 'Total', `€${statement.totalAmount.toFixed(2)}`]],
  });

  // Add payment instructions
  const paymentY = doc.lastAutoTable?.finalY || 150;
  doc.setFontSize(12);
  doc.text('Payment Instructions', 20, paymentY + 20);
  
  doc.setFontSize(10);
  doc.text([
    'Please include the statement number with your payment.',
    'Payment is due within 30 days.',
    statement.status === 'overdue' ? 'This statement is overdue.' : '',
  ].filter(Boolean), 20, paymentY + 30);

  // Add footer
  doc.setFontSize(8);
  doc.text(
    'Generated by DentalConnect',
    pageWidth / 2,
    doc.internal.pageSize.height - 10,
    { align: 'center' }
  );

  return doc.output('blob');
}